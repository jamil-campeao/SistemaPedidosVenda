unit UnFuncoesBancoDados;

interface

uses
  FireDAC.Comp.Client, System.SysUtils;

type
  TConfigBancoDados = record
    Conexao: TFDConnection;
  end;

  TConfiguracao = class
    strict private
      class var vBancoDados: TConfigBancoDados;
    public
      class procedure CarregarConfigBancoDados(pConexao: TFDConnection); static;
      class property BancoDados: TConfigBancoDados read vBancoDados;
      class function ProximoRegistro(const cNomeTabela, sNomeCampo: string): Integer;
  end;

implementation

{ TConfiguracao }

class procedure TConfiguracao.CarregarConfigBancoDados(pConexao: TFDConnection);
begin
  vBancoDados.Conexao := pConexao;
end;

class function TConfiguracao.ProximoRegistro(const cNomeTabela, sNomeCampo: string): Integer;
var
  vSQLQuery: TFDQuery;
  vSQL: string;
begin
  vSQLQuery := TFDQuery.Create(nil);
  try
    vSQLQuery.Connection := vBancoDados.Conexao;

    vSQL := Format('SELECT MAX(%s) AS MaxValor FROM %s', [sNomeCampo, cNomeTabela]);
    vSQLQuery.SQL.Text := vSQL;
    vSQLQuery.Open;

    // Verifica se o campo MAX(<NomeCampo>) retornou nulo
    if vSQLQuery.FieldByName('MaxValor').IsNull then
      Result := 1 // Primeiro registro se ainda não houver nenhum
    else
      Result := vSQLQuery.FieldByName('MaxValor').AsInteger + 1;

  finally
    FreeAndNil(vSQLQuery);
  end;
end;

end.

